// <auto-generated />
using System;
using DataAccesShop;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace DataAccesShop.Migrations
{
    [DbContext(typeof(BookShopDbContext))]
    [Migration("20251006145318_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.20")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("AuthorClient", b =>
                {
                    b.Property<int>("FollowedAuthorsId")
                        .HasColumnType("int");

                    b.Property<int>("FollowersId")
                        .HasColumnType("int");

                    b.HasKey("FollowedAuthorsId", "FollowersId");

                    b.HasIndex("FollowersId");

                    b.ToTable("AuthorClient");
                });

            modelBuilder.Entity("BookClient", b =>
                {
                    b.Property<int>("BooksId")
                        .HasColumnType("int");

                    b.Property<int>("ClientsId")
                        .HasColumnType("int");

                    b.HasKey("BooksId", "ClientsId");

                    b.HasIndex("ClientsId");

                    b.ToTable("BookClient");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Author", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CountryId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Authors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryId = 1,
                            Name = "Scott",
                            Surname = "Fitzgerald"
                        },
                        new
                        {
                            Id = 2,
                            CountryId = 2,
                            Name = "George",
                            Surname = "Orwell"
                        },
                        new
                        {
                            Id = 3,
                            CountryId = 3,
                            Name = "Harper",
                            Surname = "Lee"
                        },
                        new
                        {
                            Id = 4,
                            CountryId = 4,
                            Name = "J.D.",
                            Surname = "Salinger"
                        },
                        new
                        {
                            Id = 5,
                            CountryId = 5,
                            Name = "F. Scott",
                            Surname = "Fitzgerald"
                        });
                });

            modelBuilder.Entity("DataAccesShop.Entities.Book", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AuthorId")
                        .HasColumnType("int");

                    b.Property<int>("Discount")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.Property<int?>("NextChapterId")
                        .HasColumnType("int");

                    b.Property<int>("Pages")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("PriceForSale")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PublisherId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("GenreId");

                    b.HasIndex("NextChapterId");

                    b.HasIndex("PublisherId");

                    b.ToTable("Books");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AuthorId = 1,
                            Discount = 0,
                            GenreId = 1,
                            Pages = 0,
                            Price = 10.99m,
                            PriceForSale = 0m,
                            PublisherId = 1,
                            Title = "The Great Gatsby",
                            Year = 1925
                        },
                        new
                        {
                            Id = 2,
                            AuthorId = 2,
                            Discount = 0,
                            GenreId = 2,
                            Pages = 0,
                            Price = 8.99m,
                            PriceForSale = 0m,
                            PublisherId = 2,
                            Title = "1984",
                            Year = 1949
                        },
                        new
                        {
                            Id = 3,
                            AuthorId = 3,
                            Discount = 0,
                            GenreId = 1,
                            Pages = 0,
                            Price = 12.99m,
                            PriceForSale = 0m,
                            PublisherId = 3,
                            Title = "To Kill a Mockingbird",
                            Year = 1960
                        },
                        new
                        {
                            Id = 4,
                            AuthorId = 4,
                            Discount = 0,
                            GenreId = 1,
                            Pages = 0,
                            Price = 9.99m,
                            PriceForSale = 0m,
                            PublisherId = 4,
                            Title = "The Catcher in the Rye",
                            Year = 1951
                        },
                        new
                        {
                            Id = 5,
                            AuthorId = 2,
                            Discount = 0,
                            GenreId = 2,
                            Pages = 0,
                            Price = 11.99m,
                            PriceForSale = 0m,
                            PublisherId = 5,
                            Title = "Brave New World",
                            Year = 1932
                        });
                });

            modelBuilder.Entity("DataAccesShop.Entities.Client", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)");

                    b.HasKey("Id");

                    b.ToTable("Clients");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Email = "User123@gmail.com",
                            FullName = "George Paterson",
                            PhoneNumber = "+12345678901234"
                        });
                });

            modelBuilder.Entity("DataAccesShop.Entities.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Countries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "USA"
                        },
                        new
                        {
                            Id = 2,
                            Name = "UK"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Canada"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Australia"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Germany"
                        });
                });

            modelBuilder.Entity("DataAccesShop.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fiction"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Science Fiction"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Mystery"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Romance"
                        });
                });

            modelBuilder.Entity("DataAccesShop.Entities.Publisher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Publishers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Scribner"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Penguin Books"
                        },
                        new
                        {
                            Id = 3,
                            Name = "HarperCollins"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Simon & Schuster"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Hachette Book Group"
                        });
                });

            modelBuilder.Entity("AuthorClient", b =>
                {
                    b.HasOne("DataAccesShop.Entities.Author", null)
                        .WithMany()
                        .HasForeignKey("FollowedAuthorsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesShop.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("FollowersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BookClient", b =>
                {
                    b.HasOne("DataAccesShop.Entities.Book", null)
                        .WithMany()
                        .HasForeignKey("BooksId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesShop.Entities.Client", null)
                        .WithMany()
                        .HasForeignKey("ClientsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("DataAccesShop.Entities.Author", b =>
                {
                    b.HasOne("DataAccesShop.Entities.Country", "Country")
                        .WithMany("Authors")
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Book", b =>
                {
                    b.HasOne("DataAccesShop.Entities.Author", "Author")
                        .WithMany("Books")
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesShop.Entities.Genre", "Genre")
                        .WithMany("Books")
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("DataAccesShop.Entities.Book", "NextChapter")
                        .WithMany()
                        .HasForeignKey("NextChapterId");

                    b.HasOne("DataAccesShop.Entities.Publisher", "Publisher")
                        .WithMany("Books")
                        .HasForeignKey("PublisherId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Author");

                    b.Navigation("Genre");

                    b.Navigation("NextChapter");

                    b.Navigation("Publisher");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Author", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Country", b =>
                {
                    b.Navigation("Authors");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Genre", b =>
                {
                    b.Navigation("Books");
                });

            modelBuilder.Entity("DataAccesShop.Entities.Publisher", b =>
                {
                    b.Navigation("Books");
                });
#pragma warning restore 612, 618
        }
    }
}
